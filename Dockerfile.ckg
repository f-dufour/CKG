FROM ubuntu:20.04

LABEL maintainer  = "Alberto Santos <alberto.santos@sund.ku.dk>"
LABEL contributor = "Florent Dufour <florent@lrz.de>"

ARG PYTHON_VERSION=3.9
ARG R_VERSION=3.6.1

ENV DEBIAN_FRONTEND noninteractive
ENV LC_CTYPE en_US.UTF-8
ENV LANG en_US.UTF-8

## ------------ ##
## DEPENDENCIES ##
## ------------ ##

# System
RUN --mount=type=cache,target=/var/cache/apt apt-get update && apt-get -yq upgrade \
    # Utils
    && apt-get install --no-install-recommends -yq apt-utils software-properties-common \
    # Common CLI tools
    sudo locales wget zip dos2unix git net-tools gnupg2 \
    # Dev tools
    build-essential sqlite3 libsqlite3-dev libxml2 libxml2-dev zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libcurl4-openssl-dev \
    # CKG dependencies
    nginx redis-server python${PYTHON_VERSION}-dev python3-pip npm nodejs \
    # Clean *in the same image layer*
    && apt clean

# Python stuff
COPY ./requirements.txt /tmp
RUN --mount=type=cache,target=/root/.cache/pip python${PYTHON_VERSION} -m pip install --upgrade pip \
    && python${PYTHON_VERSION} -m pip install setuptools \
    && python${PYTHON_VERSION} -m pip install --ignore-installed -r /tmp/requirements.txt \
    && npm install -g configurable-http-proxy

# R stuff
COPY /resources/R_packages.R /R_packages.R
RUN gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys E084DAB9 \
    && gpg -a --export E084DAB9 > cran.asc \
    && apt-key add cran.asc \ 
    && apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 51716619E084DAB9 \
    && echo "deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran35/" > /etc/apt/sources.list.d/cran.list
RUN --mount=type=cache,target=/var/cache/apt apt-get update \
    && apt-get install -y --no-install-recommends littler r-cran-littler r-base=${R_VERSION}* r-base-dev=${R_VERSION}* r-recommended=${R_VERSION}* \
    && echo 'options(repos = c(CRAN = "https://cloud.r-project.org/"), download.file.method = "libcurl")' >> /etc/R/Rprofile.site
RUN Rscript R_packages.R

## --------------- ##
## User management ##
## --------------- ##

RUN groupadd ckg_group \
    # adminhub
    && adduser --quiet --disabled-password --shell /bin/bash --home /home/adminhub --gecos "User" adminhub \
    && echo "adminhub:adminhub" | chpasswd \
    && usermod -a -G ckg_group adminhub  \
    # ckguser
    && adduser --quiet --disabled-password --shell /bin/bash --home /home/ckguser --gecos "User" ckguser \
    && echo "ckguser:ckguser" | chpasswd \
    && usermod -a -G ckg_group ckguser \
    # nginx
    && adduser --disabled-password --gecos '' --uid 1500 nginx \
    && usermod -a -G ckg_group nginx

## ---------------------------- ##
## CKG requirements and install ##
## ---------------------------- ##

WORKDIR /CKG
ENV PYTHONPATH "${PYTHONPATH}:/CKG"

# CKG code
COPY --chown=nginx ckg /CKG/ckg

# NGINX
COPY /resources/nginx.conf /etc/nginx/.

# uWSGI
COPY /resources/uwsgi.ini /etc/uwsgi/apps-available/uwsgi.ini
COPY /resources/uwsgi.ini /etc/uwsgi/apps-enabled/uwsgi.ini
RUN mkdir -p /var/log/uwsgi

# FIXME
RUN chmod 777 /run/ -R && \
    chmod 777 /root/ -R

# Jupyter
COPY /resources/jupyterhub.py /etc/jupyterhub/jupyterhub.py 
RUN cp -r /CKG/ckg/notebooks /home/adminhub/.
RUN cp -r /CKG/ckg/notebooks /home/ckguser/.
RUN chown -R adminhub /home/adminhub/notebooks
RUN chgrp -R adminhub /home/adminhub/notebooks
RUN chown -R ckguser /home/ckguser/notebooks
RUN chgrp -R ckguser /home/ckguser/notebooks

# CKG init
RUN python${PYTHON_VERSION} ckg/init.py
RUN chown -R nginx . \
    && chgrp -R ckg_group . \
    && chmod 777 log/ -R

# Entrypoint
COPY ckg_entrypoint.sh /CKG

# Expose ports for Jupyter Hub, CKG prod, CKG dev, redis
EXPOSE 8090 8050 5000 6379

ENTRYPOINT ["/bin/bash", "/CKG/ckg_entrypoint.sh"]